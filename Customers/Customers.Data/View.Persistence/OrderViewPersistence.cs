//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using Customers.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace View.Persistence
{

	/// <summary>Static class for (extension) methods for fetching and projecting instances of View.DtoClasses.OrderView from the entity model.</summary>
	public static partial class OrderViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<Customers.Data.EntityClasses.OrderEntity, View.DtoClasses.OrderView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<Customers.Data.EntityClasses.OrderEntity, View.DtoClasses.OrderView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToOrderView(System.Linq.IQueryable{Customers.Data.EntityClasses.OrderEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToOrderView(ref System.Linq.Expressions.Expression<Func<Customers.Data.EntityClasses.OrderEntity, View.DtoClasses.OrderView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToOrderView(EntityQuery{Customers.Data.EntityClasses.OrderEntity}, Customers.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToOrderView(EntityQuery{Customers.Data.EntityClasses.OrderEntity}, Customers.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToOrderViewQs(ref System.Linq.Expressions.Expression<Func<View.DtoClasses.OrderView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static OrderViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to View.DtoClasses.OrderView which instances are projected from the results of the specified baseQuery, which returns Customers.Data.EntityClasses.OrderEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve View.DtoClasses.OrderView instances</returns>
		public static IQueryable<View.DtoClasses.OrderView> ProjectToOrderView(this IQueryable<Customers.Data.EntityClasses.OrderEntity> baseQuery)
		{
			return baseQuery.Select(_projectorExpression);
		}

		/// <summary>Extension method which produces a projection to View.DtoClasses.OrderView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns Customers.Data.EntityClasses.OrderEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve View.DtoClasses.OrderView instances</returns>
		public static DynamicQuery<View.DtoClasses.OrderView> ProjectToOrderView(this EntityQuery<Customers.Data.EntityClasses.OrderEntity> baseQuery, Customers.Data.FactoryClasses.QueryFactory qf)
		{
			System.Linq.Expressions.Expression<Func<View.DtoClasses.OrderView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToOrderViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ")
					.InnerJoin(qf.Customer.As("__L0_0")).On(OrderFields.CustomerId.Source("__BQ").Equal(CustomerFields.Id.Source("__L0_0"))))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new View.DtoClasses.OrderView()
				{
					Customer = new View.DtoClasses.OrderViewTypes.Customer()
						{
							FirstName = CustomerFields.FirstName.Source("__L0_0").ToValue<System.String>(),
							LastName = CustomerFields.LastName.Source("__L0_0").ToValue<System.String>(),
						},
					OrderDate = OrderFields.OrderDate.Source("__BQ").ToValue<System.DateTime>(),
					OrderName = OrderFields.OrderName.Source("__BQ").ToValue<System.String>(),
					Status = OrderFields.Status.Source("__BQ").ToValue<System.String>(),
					Total = OrderFields.Total.Source("__BQ").ToValue<System.Decimal>(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_OrderView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to View.DtoClasses.OrderView which instances are projected from the Customers.Data.EntityClasses.OrderEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>Customers.Data.EntityClasses.OrderEntity instance created from the specified entity instance</returns>
		public static View.DtoClasses.OrderView ProjectToOrderView(this Customers.Data.EntityClasses.OrderEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<Customers.Data.EntityClasses.OrderEntity, View.DtoClasses.OrderView>> CreateProjectionFunc()
		{
			System.Linq.Expressions.Expression<Func<Customers.Data.EntityClasses.OrderEntity, View.DtoClasses.OrderView>> mainProjection = p__0 => new View.DtoClasses.OrderView()
			{
				Customer = new View.DtoClasses.OrderViewTypes.Customer()
				{
					FirstName = p__0.Customer.FirstName,
					LastName = p__0.Customer.LastName,
				},
				OrderDate = p__0.OrderDate,
				OrderName = p__0.OrderName,
				Status = p__0.Status,
				Total = p__0.Total,
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_OrderView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<Customers.Data.EntityClasses.OrderEntity, View.DtoClasses.OrderView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToOrderView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


